{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\"; // import { nanoid } from \"nanoid\";\n\nexport const contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState: [],\n  reducers: {\n    addContact: {\n      reducers(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(name) {\n        return {\n          payload: {\n            name,\n            id: nanoid()\n          }\n        };\n      }\n\n    },\n\n    removeContact(state, action) {\n      return state.filter(item => item.id !== action.payload);\n    }\n\n  }\n});\nexport const {\n  addContact,\n  removeContact\n} = contactsSlice.actions;\nexport const tasksReducer = contactsSlice.reducer;","map":{"version":3,"sources":["/Users/vlad/Documents/GitHub/goit-react-hw-06-phonebook/src/redux/contactsStore/slice.js"],"names":["createSlice","nanoid","contactsSlice","name","initialState","reducers","addContact","state","action","push","payload","prepare","id","removeContact","filter","item","actions","tasksReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC,C,CACA;;AAEA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE,EAFyB;AAGvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE;AACVD,MAAAA,QAAQ,CAACE,KAAD,EAAQC,MAAR,EAAgB;AACtBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHS;;AAIVC,MAAAA,OAAO,CAACR,IAAD,EAAO;AACZ,eAAO;AACLO,UAAAA,OAAO,EAAE;AACPP,YAAAA,IADO;AAEPS,YAAAA,EAAE,EAAEX,MAAM;AAFH;AADJ,SAAP;AAMD;;AAXS,KADJ;;AAcRY,IAAAA,aAAa,CAACN,KAAD,EAAQC,MAAR,EAAgB;AAC3B,aAAOD,KAAK,CAACO,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYJ,MAAM,CAACE,OAA1C,CAAP;AACD;;AAhBO;AAH6B,CAAD,CAAjC;AAuBP,OAAO,MAAM;AAAEJ,EAAAA,UAAF;AAAcO,EAAAA;AAAd,IAAgCX,aAAa,CAACc,OAApD;AACP,OAAO,MAAMC,YAAY,GAAGf,aAAa,CAACgB,OAAnC","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n// import { nanoid } from \"nanoid\";\n\nexport const contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState: [],\n  reducers: {\n    addContact: {\n      reducers(state, action) {\n        state.push(action.payload);\n      },\n      prepare(name) {\n        return {\n          payload: {\n            name,\n            id: nanoid(),\n          },\n        };\n      },\n    },\n    removeContact(state, action) {\n      return state.filter((item) => item.id !== action.payload);\n    },\n  },\n});\n\nexport const { addContact, removeContact } = contactsSlice.actions;\nexport const tasksReducer = contactsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}