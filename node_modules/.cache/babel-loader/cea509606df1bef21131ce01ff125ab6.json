{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nexport const contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState: [],\n  reducers: {\n    addContact: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(name, phone) {\n        return {\n          payload: {\n            name,\n            phone,\n            id: nanoid()\n          }\n        };\n      }\n\n    },\n\n    removeContact(state, action) {\n      return state.filter(item => item.id !== action.payload);\n    }\n\n  }\n});\nexport const {\n  addContact,\n  removeContact\n} = contactsSlice.actions; // export const tasksReducer = contactsSlice.reducer;","map":{"version":3,"sources":["/Users/vlad/Documents/GitHub/goit-react-hw-06-phonebook/src/redux/contactsStore/slice.js"],"names":["createSlice","nanoid","contactsSlice","name","initialState","reducers","addContact","reducer","state","action","push","payload","prepare","phone","id","removeContact","filter","item","actions"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE,EAFyB;AAGvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,OAHS;;AAIVC,MAAAA,OAAO,CAACT,IAAD,EAAOU,KAAP,EAAc;AACnB,eAAO;AACLF,UAAAA,OAAO,EAAE;AACPR,YAAAA,IADO;AAEPU,YAAAA,KAFO;AAGPC,YAAAA,EAAE,EAAEb,MAAM;AAHH;AADJ,SAAP;AAOD;;AAZS,KADJ;;AAgBRc,IAAAA,aAAa,CAACP,KAAD,EAAQC,MAAR,EAAgB;AAC3B,aAAOD,KAAK,CAACQ,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACH,EAAL,KAAYL,MAAM,CAACE,OAA1C,CAAP;AACD;;AAlBO;AAH6B,CAAD,CAAjC;AA0BP,OAAO,MAAM;AAAEL,EAAAA,UAAF;AAAcS,EAAAA;AAAd,IACXb,aAAa,CAACgB,OADT,C,CAEP","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n\nexport const contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState: [],\n  reducers: {\n    addContact: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(name, phone) {\n        return {\n          payload: {\n            name,\n            phone,\n            id: nanoid(),\n          },\n        };\n      },\n    },\n\n    removeContact(state, action) {\n      return state.filter((item) => item.id !== action.payload);\n    },\n    \n  },\n});\n\nexport const { addContact, removeContact } =\n  contactsSlice.actions;\n// export const tasksReducer = contactsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}