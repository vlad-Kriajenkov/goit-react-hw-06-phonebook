{"ast":null,"code":"import { createSlice, nanoid } from \"@reduxjs/toolkit\";\nexport const contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState: [],\n  reducers: {\n    removeContact(state, action) {\n      return state.filter(item => item.id !== action.payload);\n    },\n\n    addContact: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n\n      prepare(name, phone) {\n        return {\n          payload: {\n            name,\n            phone,\n            id: nanoid()\n          }\n        };\n      }\n\n    }\n  }\n});\nexport const {\n  addContact,\n  removeContact\n} = contactsSlice.actions;\nexport const tasksReducer = contactsSlice.reducer;","map":{"version":3,"sources":["/Users/vlad/Documents/GitHub/goit-react-hw-06-phonebook/src/redux/contactsStore/slice.js"],"names":["createSlice","nanoid","contactsSlice","name","initialState","reducers","removeContact","state","action","filter","item","id","payload","addContact","reducer","push","prepare","phone","actions","tasksReducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAoC,kBAApC;AAEA,OAAO,MAAMC,aAAa,GAAGF,WAAW,CAAC;AACvCG,EAAAA,IAAI,EAAE,UADiC;AAEvCC,EAAAA,YAAY,EAAE,EAFyB;AAGvCC,EAAAA,QAAQ,EAAE;AAGRC,IAAAA,aAAa,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC3B,aAAOD,KAAK,CAACE,MAAN,CAAcC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYH,MAAM,CAACI,OAA1C,CAAP;AACD,KALO;;AAMRC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,CAACP,KAAD,EAAQC,MAAR,EAAgB;AACrBD,QAAAA,KAAK,CAACQ,IAAN,CAAWP,MAAM,CAACI,OAAlB;AACD,OAHS;;AAIVI,MAAAA,OAAO,CAACb,IAAD,EAAOc,KAAP,EAAc;AACnB,eAAO;AACLL,UAAAA,OAAO,EAAE;AACPT,YAAAA,IADO;AAEPc,YAAAA,KAFO;AAGPN,YAAAA,EAAE,EAAEV,MAAM;AAHH;AADJ,SAAP;AAOD;;AAZS;AANJ;AAH6B,CAAD,CAAjC;AA2BP,OAAO,MAAM;AAAEY,EAAAA,UAAF;AAAcP,EAAAA;AAAd,IACXJ,aAAa,CAACgB,OADT;AAEP,OAAO,MAAMC,YAAY,GAAGjB,aAAa,CAACY,OAAnC","sourcesContent":["import { createSlice, nanoid } from \"@reduxjs/toolkit\";\n\nexport const contactsSlice = createSlice({\n  name: \"contacts\",\n  initialState: [],\n  reducers: {\n   \n\n    removeContact(state, action) {\n      return state.filter((item) => item.id !== action.payload);\n    },\n    addContact: {\n      reducer(state, action) {\n        state.push(action.payload);\n      },\n      prepare(name, phone) {\n        return {\n          payload: {\n            name,\n            phone,\n            id: nanoid(),\n          },\n        };\n      },\n    },\n    \n  },\n});\n\nexport const { addContact, removeContact } =\n  contactsSlice.actions;\nexport const tasksReducer = contactsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}